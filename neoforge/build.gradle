import com.fasterxml.jackson.databind.ObjectMapper
import com.moandjiezana.toml.TomlWriter

buildscript {
    dependencies {
        classpath 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
        classpath 'com.moandjiezana.toml:toml4j:0.7.2'
    }
}

plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'java'
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation "curse.maven:jei-238222:5846880"
}

neoForge {
    version = neoforge_version
    parchment {
        mappingsVersion = project.parchment_version
        minecraftVersion = project.parchment_minecraft
    }
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    def output = project(':common').file('src/main/generated')
    def existing = project(':common').file('src/main/resources')
    if (at.exists()) {
        accessTransformers {
            at
        }
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', output.getAbsolutePath(), '--existing', existing.getAbsolutePath()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

tasks.register('json2toml') {
    def jsonFile = file('src/main/resources/META-INF/neoforge.mods.json')
    def tomlFile = file('src/main/generated/META-INF/neoforge.mods.toml')

    tomlFile.parentFile.mkdirs()

    def mapper = new ObjectMapper()
    def jsonData = mapper.readValue(jsonFile, Map)

    def writer = new TomlWriter()
    writer.write(jsonData, tomlFile)
}

//We let the json2toml function run when processing resources
processResources.dependsOn(json2toml)

//Make sure to exclude the json file when exporting the mod
processResources {
    exclude 'META-INF/neoforge.mods.json'
}

sourceSets.main.resources { srcDir 'src/main/generated' }
